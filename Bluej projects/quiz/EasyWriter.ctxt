#BlueJ class context
comment0.params=fileName
comment0.target=EasyWriter(java.lang.String)
comment0.text=\r\n\ \ Constructs\ an\ <code>EasyWriter</code>\ associated\ with\ a\ new\ file\r\n\ \ (or\ truncates\ an\ existing\ file).\r\n\ \ @param\ fileName\ the\ name\ of\ the\ file\ to\ be\ created.\r\n
comment1.params=fileName\ mode
comment1.target=EasyWriter(java.lang.String,\ java.lang.String)
comment1.text=\r\n\ \ Constructs\ an\ <code>EasyWriter</code>\ that\ can\ append\ data\ to\ an\r\n\ \ existing\ file.\r\n\ \ @param\ fileName\ the\ name\ of\ the\ file\ to\ be\ created.\r\n\ \ @param\ mode\ if\ <code>mode</code>\ is\ "app"\ and\ the\ file\ exists,\r\n\ \ then\ opens\ the\ file\ in\ append\ mode.\r\n
comment10.params=ch
comment10.target=void\ println(char)
comment10.text=\r\n\ \ Writes\ one\ character\ and\ newline\ to\ the\ file.\r\n\ \ @param\ ch\ character\ to\ be\ written.\r\n
comment11.params=k
comment11.target=void\ println(int)
comment11.text=\r\n\ \ Writes\ an\ integer\ and\ newline\ to\ the\ file.\r\n\ \ @param\ k\ number\ to\ be\ written.\r\n
comment12.params=x
comment12.target=void\ println(double)
comment12.text=\r\n\ \ Writes\ a\ double\ and\ newline\ to\ the\ file.\r\n\ \ @param\ x\ number\ to\ be\ written.\r\n
comment13.params=s
comment13.target=void\ println(java.lang.String)
comment13.text=\r\n\ \ Writes\ a\ string\ and\ newline\ to\ the\ file.\r\n\ \ @param\ s\ string\ to\ be\ written.\r\n
comment14.params=obj
comment14.target=void\ println(java.lang.Object)
comment14.text=\r\n\ \ Writes\ an\ object\ and\ newline\ to\ the\ file.\r\n\ \ @param\ obj\ object\ to\ be\ written.\r\n
comment15.params=format\ args
comment15.target=void\ printf(java.lang.String,\ java.lang.Object[])
comment15.text=\r\n\ \ A\ convenience\ method\ to\ write\ a\ formatted\ string\ to\ this\r\n\ \ <code>EasyWriter</code>\ using\ the\ specified\ format\ string\ and\ parameters.\r\n
comment2.params=
comment2.target=void\ close()
comment2.text=\r\n\ \ Closes\ the\ file.\ \ If\ the\ file\ is\ not\ closed,\ some\ data\ may\ remain\r\n\ \ in\ the\ write\ buffer\ but\ not\ written\ to\ the\ file.\r\n
comment3.params=
comment3.target=boolean\ bad()
comment3.text=\r\n\ \ Checks\ the\ status\ of\ the\ file.\r\n\ \ @return\ true\ if\ an\ error\ occurred\ when\ opening\ or\ writing\ to\ the\ file;\r\n\ \ false\ otherwise.\r\n
comment4.params=ch
comment4.target=void\ print(char)
comment4.text=\r\n\ \ Writes\ one\ character\ to\ the\ file.\r\n\ \ @param\ ch\ character\ to\ be\ written.\r\n
comment5.params=k
comment5.target=void\ print(int)
comment5.text=\r\n\ \ Writes\ an\ integer\ to\ the\ file.\r\n\ \ @param\ k\ number\ to\ be\ written.\r\n
comment6.params=x
comment6.target=void\ print(double)
comment6.text=\r\n\ \ Writes\ a\ double\ to\ the\ file.\r\n\ \ @param\ x\ number\ to\ be\ written.\r\n
comment7.params=s
comment7.target=void\ print(java.lang.String)
comment7.text=\r\n\ \ Writes\ a\ string\ to\ the\ file.\r\n\ \ @param\ s\ string\ to\ be\ written.\r\n
comment8.params=obj
comment8.target=void\ print(java.lang.Object)
comment8.text=\r\n\ \ Writes\ an\ object\ to\ the\ file.\r\n\ \ @param\ obj\ object\ to\ be\ written.\r\n
comment9.params=
comment9.target=void\ println()
comment9.text=\r\n\ \ Writes\ a\ newline\ character\ to\ the\ file.\r\n
numComments=16
